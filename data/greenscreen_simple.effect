uniform float4x4 ViewProj;
uniform texture2d image;

uniform float key_hue;
uniform float similarity;
uniform float desaturation;
uniform float darkness;
uniform float brightness;
uniform	float radius;
uniform	float2 pixel_size;
uniform int sample_threshold;

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 RgbToHsv(float3 c)
{
	float4 hsv = 0;
	float maxc = max(max(c.r, c.g), c.b);
	float minc = min(min(c.r, c.g), c.b);
	
	hsv[2] = maxc;
	hsv[3] = maxc;
	if (minc == maxc)
		return hsv;
	
	float diff = maxc - minc;
	if (maxc != 0)
		hsv[1] = diff / maxc;
	
	float h = 0;
	if (c.r == maxc)
		h = 1.0f + (c.g - c.b) / diff;
	else if (c.g == maxc)
		h = 3.0f + (c.b - c.r) / diff;
	else
		h = 5.0f + (c.r - c.g) / diff;
	  
	hsv[0] = h / 6.0f;

	return hsv;
}

float GetMask(float3 rgb)
{
	float mask = 0;
	float4 hsv = RgbToHsv(rgb);

	// hue distance
	float hueDelta = min(abs(hsv[0] - key_hue), abs(hsv[0] - key_hue - 1));
	if (hueDelta >= similarity)
		mask = 1;
	
	// keep if desaturated
	if (hsv[1] < desaturation)
		mask = 1;
	
	// keep if dark
	if (hsv[2] < darkness)
		mask = 1;
	
	// keep if bright
	if (hsv[3] > brightness)
		mask = 1;

	return mask;
}

float4 SampleColor(float2 uv)
{
	float4 rgba = image.Sample(textureSampler, uv);
	rgba.rgb *= (rgba.a > 0.) ? (1. / rgba.a) : 0.;
	return rgba;
}

float4 PSColorKeyRGBA(VertData v_in) : TARGET
{	
#define NUM_SAMPLES 9
	float2 positions[NUM_SAMPLES];
	float2 rad = pixel_size * radius;
	positions[0] = float2(v_in.uv.x, v_in.uv.y);
	positions[1] = float2(v_in.uv.x + rad.x, v_in.uv.y);
	positions[2] = float2(v_in.uv.x - rad.x, v_in.uv.y);
	positions[3] = float2(v_in.uv.x, v_in.uv.y - rad.y);
	positions[4] = float2(v_in.uv.x, v_in.uv.y + rad.y);
	positions[5] = float2(v_in.uv.x - rad.x * .707f, v_in.uv.y - rad.y * .707f);
	positions[6] = float2(v_in.uv.x - rad.x * .707f, v_in.uv.y + rad.y * .707f);
	positions[7] = float2(v_in.uv.x + rad.x * .707f, v_in.uv.y - rad.y * .707f);
	positions[8] = float2(v_in.uv.x + rad.x * .707f, v_in.uv.y + rad.y * .707f);
	
	float4 color = 0;
	int countFore = 0;
	[unroll]
	for (int i = 0; i < NUM_SAMPLES; i++)
	{
		float4 c = SampleColor(positions[i]);
		float m = GetMask(c.rgb);
		
		if (i == 0)
			color = c;
		
		if (m > .5f)
			countFore++;
	}
	
	float mask = 0;
	if (countFore < NUM_SAMPLES - sample_threshold)
		mask = 0;
	else
		mask = 1;
	
	color.a *= mask;
	color.rgb *= color.a;
	return color;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSColorKeyRGBA(v_in);
	}
}
